## Task 5: Capture and Analyze Network Traffic Using Wireshark
## Objective
Capture live network packets and identify basic protocols and traffic types using Wireshark.

## Tools Used
Wireshark (packet capture and analysis)

Firefox browser (to generate HTTP traffic)

Ping utility (to generate ICMP traffic)

## Methodology
Started a live packet capture on the active network interface.

Generated network traffic by:

Opening Firefox and browsing a website to create HTTP traffic.

Pinging google.com to generate ICMP packets.

Performing DNS lookups to generate DNS traffic.

Stopped the capture after approximately one minute.

Applied display filters in Wireshark to isolate specific protocols.

Identified and analyzed at least three different protocols (TCP, HTTP, DNS).

Saved the capture as task5_traffic_analysis.pcapng.

## Protocol Analysis
1. TCP (Transmission Control Protocol)
Timestamp: (e.g., Frame 2009)

Source IP: [Local Host IP]

Destination IP: [Remote Server IP]

Source Port → Destination Port: [Random High Port] → 443 (HTTPS)

Description: TCP packet as part of an HTTPS session, likely a response from a secure web server.

2. HTTP (HyperText Transfer Protocol)
Timestamp: (frame 122)

Source IP: [Local Host IP]

Destination IP: [Remote Server IP]

Source Port → Destination Port: [35000] → 80 (HTTP)

Description: HTTP GET request initiated by Firefox browser to retrieve webpage content

3. DNS (Domain Name System)
UDP (User Datagram Protocol) Timestamp: Frame 450

Source IP: [local host IP]

Destination IP: 8.8.8.8

Source Port → Destination Port: 53450 → 53

Description: UDP packet carrying a DNS query, likely requesting the resolution of a domain name.


## Summary
The network traffic captured consisted of typical protocols involved in web browsing and network communication. HTTP traffic was generated via Firefox, DNS queries resolved domain names, and TCP ensured reliable data transmission. ICMP traffic was also generated by pinging google.com to test connectivity. This exercise provided hands-on experience with Wireshark for packet capture, protocol filtering, and analysis.
